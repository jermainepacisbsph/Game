def main_gameplay():
score = 0
p_x = int(scr_width / 5)
p_y = int(scr_width / 2)
b_x = 0


n_pip1 = get_Random_Pipes()
n_pip2 = get_Random_Pipes()


up_pips = [
{'x': scr_width + 200, 'y': n_pip1[0]['y']},
{'x': scr_width + 200 + (scr_width / 2), 'y': n_pip2[0]['y']},
]

low_pips = [
{'x': scr_width + 200, 'y': n_pip1[1]['y']},
{'x': scr_width + 200 + (scr_width / 2), 'y': n_pip2[1]['y']},
]

pip_Vx = -4

p_vx = -9
p_mvx = 10
p_mvy = -8
p_accuracy = 1

p_flap_accuracy = -8
p_flap = False

while True:
for event in pygame.event.get():
if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
pygame.quit()
sys.exit()
if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):
if p_y > 0:
p_vx = p_flap_accuracy
p_flap = True
game_audio_sound['wing'].play()

cr_tst = is_Colliding(p_x, p_y, up_pips,
low_pips)
if cr_tst:
return


p_middle_positions = p_x + game_image['player'].get_width() / 2
for pipe in up_pips:
pip_middle_positions = pipe['x'] + game_image['pipe'][0].get_width() / 2
if pip_middle_positions <= p_middle_positions < pip_middle_positions + 4:
score += 1
print(f"Your score is {score}")
game_audio_sound['point'].play()

if p_vx < p_mvx and not p_flap:
p_vx += p_accuracy

if p_flap:
p_flap = False
p_height = game_image['player'].get_height()
p_y = p_y + min(p_vx, play_ground - p_y - p_height)


for pip_upper, pip_lower in zip(up_pips, low_pips):
pip_upper['x'] += pip_Vx
pip_lower['x'] += pip_Vx


if 0 < up_pips[0]['x'] < 5:
new_pip = get_Random_Pipes()
up_pips.append(new_pip[0])
low_pips.append(new_pip[1])


if up_pips[0]['x'] < -game_image['pipe'][0].get_width():
up_pips.pop(0)
low_pips.pop(0)


display_screen_window.blit(game_image['background'], (0, 0))
for pip_upper, pip_lower in zip(up_pips, low_pips):
display_screen_window.blit(game_image['pipe'][0], (pip_upper['x'], pip_upper['y']))
display_screen_window.blit(game_image['pipe'][1], (pip_lower['x'], pip_lower['y']))

display_screen_window.blit(game_image['base'], (b_x, play_ground))
display_screen_window.blit(game_image['player'], (p_x, p_y))
d = [int(x) for x in list(str(score))]
w = 0
for digit in d:
w += game_image['numbers'][digit].get_width()
Xoffset = (scr_width - w) / 2

for digit in d:
display_screen_window.blit(game_image['numbers'][digit], (Xoffset, scr_height * 0.12))
Xoffset += game_image['numbers'][digit].get_width()
pygame.display.update()
time_clock.tick(FPS)
